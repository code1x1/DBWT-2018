// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using emensa.Models;

namespace emensa.Migrations
{
    [DbContext(typeof(emensaContext))]
    partial class emensaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity("emensa.Models.Benutzer", b =>
                {
                    b.Property<int>("Nummer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int?>("Age")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("NULL");

                    b.Property<byte>("Aktiv")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("AnlegeDatum")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnName("E-Mail")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Geburtsdatum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("HashString")
                        .IsRequired()
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("LetzerLogin")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Nachname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Nutzername")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("SaltString")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Nummer");

                    b.HasIndex("EMail")
                        .IsUnique()
                        .HasName("c_EmailEindeutig");

                    b.HasIndex("Nutzername")
                        .IsUnique()
                        .HasName("c_NutzernameEindeutig");

                    b.ToTable("Benutzer","emensa");
                });

            modelBuilder.Entity("emensa.Models.BestellungEnthältMahlzeit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int(11)");

                    b.Property<int>("Anzahl")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkBestellungen")
                        .HasColumnName("fkBestellungen")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkMahlzeit")
                        .HasColumnName("fkMahlzeit")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("FkBestellungen")
                        .HasName("c_fkBestellungen");

                    b.HasIndex("FkMahlzeit", "FkBestellungen")
                        .IsUnique()
                        .HasName("c_MahlzeitBestellungUnique");

                    b.ToTable("BestellungEnthältMahlzeit","emensa");
                });

            modelBuilder.Entity("emensa.Models.Bestellungen", b =>
                {
                    b.Property<int>("Nummer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Abholzeitpunkt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<int>("BenutzerNummer")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("BestellZeitpunkt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<float?>("Endpreis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float(10,2)")
                        .HasDefaultValueSql("NULL");

                    b.HasKey("Nummer");

                    b.HasIndex("BenutzerNummer")
                        .HasName("c_fkBenutzerNummer");

                    b.ToTable("Bestellungen","emensa");
                });

            modelBuilder.Entity("emensa.Models.Bilder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int(11)");

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasColumnName("Alt-Text")
                        .IsUnicode(false);

                    b.Property<byte[]>("Binärdaten")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Copyright")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("Titel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Bilder","emensa");
                });

            modelBuilder.Entity("emensa.Models.Deklarationen", b =>
                {
                    b.Property<string>("Zeichen")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Beschriftung")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Zeichen");

                    b.ToTable("Deklarationen","emensa");
                });

            modelBuilder.Entity("emensa.Models.Fachbereiche", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int(11)");

                    b.Property<string>("Adresse")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Website")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NULL")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Fachbereiche","emensa");
                });

            modelBuilder.Entity("emensa.Models.FhAngehörige", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkBenutzer")
                        .HasColumnName("fkBenutzer")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("FkBenutzer")
                        .HasName("c_fkBentuzerFHange");

                    b.ToTable("FH Angehörige","emensa");
                });

            modelBuilder.Entity("emensa.Models.Freunde", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int(11)");

                    b.Property<int>("Freund")
                        .HasColumnType("int(11)");

                    b.Property<int>("Nutzer")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("Freund")
                        .HasName("c_fkFreund");

                    b.HasIndex("Nutzer")
                        .HasName("c_fkBenutzer");

                    b.ToTable("Freunde","emensa");
                });

            modelBuilder.Entity("emensa.Models.GehörtZuFachbereiche", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkFachbereiche")
                        .HasColumnName("fkFachbereiche")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkFhange")
                        .HasColumnName("fkFHAnge")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("FkFachbereiche")
                        .HasName("c_fkFachbereiche");

                    b.HasIndex("FkFhange")
                        .HasName("c_fkFHAnge");

                    b.ToTable("gehörtZuFachbereiche","emensa");
                });

            modelBuilder.Entity("emensa.Models.Gäste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Ablaufdatum")
                        .HasColumnType("date");

                    b.Property<int>("FkBenutzer")
                        .HasColumnName("fkBenutzer")
                        .HasColumnType("int(11)");

                    b.Property<string>("Grund")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FkBenutzer")
                        .HasName("c_fkBenutzerGast");

                    b.ToTable("Gäste","emensa");
                });

            modelBuilder.Entity("emensa.Models.Kategorien", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int(11)");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int?>("FkBild")
                        .HasColumnName("fkBild")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("NULL");

                    b.Property<int?>("FkOberKategorie")
                        .HasColumnName("fkOberKategorie")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("NULL");

                    b.HasKey("Id");

                    b.HasIndex("FkBild")
                        .HasName("c_fkKategorieBild");

                    b.HasIndex("FkOberKategorie")
                        .HasName("c_fkOberKategorie");

                    b.ToTable("Kategorien","emensa");
                });

            modelBuilder.Entity("emensa.Models.Kommentare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int(11)");

                    b.Property<string>("Bemerkung")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NULL")
                        .IsUnicode(false);

                    b.Property<int>("Bewertung")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkStudentId")
                        .HasColumnName("fkStudentID")
                        .HasColumnType("int(11)");

                    b.Property<int?>("FkzuMahlzeit")
                        .HasColumnName("fkzuMahlzeit")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("NULL");

                    b.HasKey("Id");

                    b.HasIndex("FkStudentId")
                        .HasName("c_fkStudentID");

                    b.HasIndex("FkzuMahlzeit")
                        .HasName("c_fkzuMahlzeit");

                    b.ToTable("Kommentare","emensa");
                });

            modelBuilder.Entity("emensa.Models.MahlzeitDeklarationen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int(11)");

                    b.Property<string>("FkDeklaration")
                        .IsRequired()
                        .HasColumnName("fkDeklaration")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<int>("FkMahlzeit")
                        .HasColumnName("fkMahlzeit")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("FkMahlzeit")
                        .HasName("c_fkMahlzeitDeklarationen");

                    b.HasIndex("FkDeklaration", "FkMahlzeit")
                        .IsUnique()
                        .HasName("c_MahlzeitDeklarationenUnique");

                    b.ToTable("MahlzeitDeklarationen","emensa");
                });

            modelBuilder.Entity("emensa.Models.Mahlzeiten", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int(11)");

                    b.Property<string>("Beschreibung")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int?>("FkKategorie")
                        .HasColumnName("fkKategorie")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte?>("Verfügbar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("NULL");

                    b.Property<int>("Vorrat")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("FkKategorie")
                        .HasName("c_fkMahlzeitenKategorie");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("Name_UNIQUE");

                    b.ToTable("Mahlzeiten","emensa");
                });

            modelBuilder.Entity("emensa.Models.MahlzeitenBilder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int(11)");

                    b.Property<int>("Idbilder")
                        .HasColumnName("IDBilder")
                        .HasColumnType("int(11)");

                    b.Property<int>("Idmahlzeiten")
                        .HasColumnName("IDMahlzeiten")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("Idmahlzeiten")
                        .HasName("c_fkMahlzeitenBilder");

                    b.HasIndex("Idbilder", "Idmahlzeiten")
                        .IsUnique()
                        .HasName("BilderMahlzeitUnique");

                    b.ToTable("MahlzeitenBilder","emensa");
                });

            modelBuilder.Entity("emensa.Models.MahlzeitenZutaten", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int(11)");

                    b.Property<int>("Idmahlzeiten")
                        .HasColumnName("IDMahlzeiten")
                        .HasColumnType("int(11)");

                    b.Property<int>("Idzutaten")
                        .HasColumnName("IDZutaten")
                        .HasColumnType("int(5)");

                    b.HasKey("Id");

                    b.HasIndex("Idmahlzeiten")
                        .HasName("c_fkMahlzeitenZutaten");

                    b.HasIndex("Idzutaten", "Idmahlzeiten")
                        .IsUnique()
                        .HasName("ZutatProMahlzeit");

                    b.ToTable("MahlzeitenZutaten","emensa");
                });

            modelBuilder.Entity("emensa.Models.Mitarbeiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int(11)");

                    b.Property<int>("Büro")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkFhange")
                        .HasColumnName("fkFHange")
                        .HasColumnType("int(11)");

                    b.Property<int>("Telefon")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("FkFhange")
                        .HasName("c_fkFHangeMitarb");

                    b.ToTable("Mitarbeiter","emensa");
                });

            modelBuilder.Entity("emensa.Models.Preise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkMahlzeiten")
                        .HasColumnName("fkMahlzeiten")
                        .HasColumnType("int(11)");

                    b.Property<float>("Gastpreis")
                        .HasColumnType("float(4,2) unsigned");

                    b.Property<int>("Jahr")
                        .HasColumnType("int(11)");

                    b.Property<float>("MaPreis")
                        .HasColumnName("MA-Preis")
                        .HasColumnType("float(4,2) unsigned");

                    b.Property<float>("Studentpreis")
                        .HasColumnType("float(4,2) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("FkMahlzeiten")
                        .HasName("c_fkPreiseMahlzeiten");

                    b.ToTable("Preise","emensa");
                });

            modelBuilder.Entity("emensa.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentID")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkFhange")
                        .HasColumnName("fkFHange")
                        .HasColumnType("int(11)");

                    b.Property<int>("Matrikelnummer")
                        .HasColumnType("int(11)");

                    b.Property<string>("Studiengang")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.HasKey("StudentId");

                    b.HasIndex("FkFhange")
                        .HasName("c_fkFHangeStud");

                    b.HasIndex("Matrikelnummer")
                        .IsUnique()
                        .HasName("c_MatrikelnummerUnique");

                    b.ToTable("Student","emensa");
                });

            modelBuilder.Entity("emensa.Models.Zutaten", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int(5)");

                    b.Property<byte>("Bio")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("Glutenfrei")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte>("Vegan")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("Vegetarisch")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Zutaten","emensa");
                });

            modelBuilder.Entity("emensa.Models.BestellungEnthältMahlzeit", b =>
                {
                    b.HasOne("emensa.Models.Bestellungen", "FkBestellungenNavigation")
                        .WithMany("BestellungEnthältMahlzeit")
                        .HasForeignKey("FkBestellungen")
                        .HasConstraintName("c_fkBestellungen");

                    b.HasOne("emensa.Models.Mahlzeiten", "FkMahlzeitNavigation")
                        .WithMany("BestellungEnthältMahlzeit")
                        .HasForeignKey("FkMahlzeit")
                        .HasConstraintName("c_fkMahlzeit");
                });

            modelBuilder.Entity("emensa.Models.Bestellungen", b =>
                {
                    b.HasOne("emensa.Models.Benutzer", "BenutzerNummerNavigation")
                        .WithMany("Bestellungen")
                        .HasForeignKey("BenutzerNummer")
                        .HasConstraintName("c_fkBenutzerNummer")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("emensa.Models.FhAngehörige", b =>
                {
                    b.HasOne("emensa.Models.Benutzer", "FkBenutzerNavigation")
                        .WithMany("FhAngehörige")
                        .HasForeignKey("FkBenutzer")
                        .HasConstraintName("c_fkBentuzerFHange")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("emensa.Models.Freunde", b =>
                {
                    b.HasOne("emensa.Models.Benutzer", "FreundNavigation")
                        .WithMany("FreundeFreundNavigation")
                        .HasForeignKey("Freund")
                        .HasConstraintName("c_fkFreund")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("emensa.Models.Benutzer", "NutzerNavigation")
                        .WithMany("FreundeNutzerNavigation")
                        .HasForeignKey("Nutzer")
                        .HasConstraintName("c_fkBenutzer")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("emensa.Models.GehörtZuFachbereiche", b =>
                {
                    b.HasOne("emensa.Models.Fachbereiche", "FkFachbereicheNavigation")
                        .WithMany("GehörtZuFachbereiche")
                        .HasForeignKey("FkFachbereiche")
                        .HasConstraintName("c_fkFachbereiche")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("emensa.Models.FhAngehörige", "FkFhangeNavigation")
                        .WithMany("GehörtZuFachbereiche")
                        .HasForeignKey("FkFhange")
                        .HasConstraintName("c_fkFHAnge")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("emensa.Models.Gäste", b =>
                {
                    b.HasOne("emensa.Models.Benutzer", "FkBenutzerNavigation")
                        .WithMany("Gäste")
                        .HasForeignKey("FkBenutzer")
                        .HasConstraintName("c_fkBenutzerGast")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("emensa.Models.Kategorien", b =>
                {
                    b.HasOne("emensa.Models.Bilder", "FkBildNavigation")
                        .WithMany("Kategorien")
                        .HasForeignKey("FkBild")
                        .HasConstraintName("c_fkKategorieBild");

                    b.HasOne("emensa.Models.Kategorien", "FkOberKategorieNavigation")
                        .WithMany("InverseFkOberKategorieNavigation")
                        .HasForeignKey("FkOberKategorie")
                        .HasConstraintName("c_fkOberKategorie");
                });

            modelBuilder.Entity("emensa.Models.Kommentare", b =>
                {
                    b.HasOne("emensa.Models.Student", "FkStudent")
                        .WithMany("Kommentare")
                        .HasForeignKey("FkStudentId")
                        .HasConstraintName("c_fkStudentID");

                    b.HasOne("emensa.Models.Mahlzeiten", "FkzuMahlzeitNavigation")
                        .WithMany("Kommentare")
                        .HasForeignKey("FkzuMahlzeit")
                        .HasConstraintName("c_fkzuMahlzeit");
                });

            modelBuilder.Entity("emensa.Models.MahlzeitDeklarationen", b =>
                {
                    b.HasOne("emensa.Models.Deklarationen", "FkDeklarationNavigation")
                        .WithMany("MahlzeitDeklarationen")
                        .HasForeignKey("FkDeklaration")
                        .HasConstraintName("c_fkDeklaration");

                    b.HasOne("emensa.Models.Mahlzeiten", "FkMahlzeitNavigation")
                        .WithMany("MahlzeitDeklarationen")
                        .HasForeignKey("FkMahlzeit")
                        .HasConstraintName("c_fkMahlzeitDeklarationen");
                });

            modelBuilder.Entity("emensa.Models.Mahlzeiten", b =>
                {
                    b.HasOne("emensa.Models.Kategorien", "FkKategorieNavigation")
                        .WithMany("Mahlzeiten")
                        .HasForeignKey("FkKategorie")
                        .HasConstraintName("c_fkMahlzeitenKategorie");
                });

            modelBuilder.Entity("emensa.Models.MahlzeitenBilder", b =>
                {
                    b.HasOne("emensa.Models.Bilder", "IdbilderNavigation")
                        .WithMany("MahlzeitenBilder")
                        .HasForeignKey("Idbilder")
                        .HasConstraintName("c_fkBilderMahlzeiten")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("emensa.Models.Mahlzeiten", "IdmahlzeitenNavigation")
                        .WithMany("MahlzeitenBilder")
                        .HasForeignKey("Idmahlzeiten")
                        .HasConstraintName("c_fkMahlzeitenBilder")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("emensa.Models.MahlzeitenZutaten", b =>
                {
                    b.HasOne("emensa.Models.Mahlzeiten", "IdmahlzeitenNavigation")
                        .WithMany("MahlzeitenZutaten")
                        .HasForeignKey("Idmahlzeiten")
                        .HasConstraintName("c_fkMahlzeitenZutaten")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("emensa.Models.Zutaten", "IdzutatenNavigation")
                        .WithMany("MahlzeitenZutaten")
                        .HasForeignKey("Idzutaten")
                        .HasConstraintName("c_fkZutatenMahlzeiten")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("emensa.Models.Mitarbeiter", b =>
                {
                    b.HasOne("emensa.Models.FhAngehörige", "FkFhangeNavigation")
                        .WithMany("Mitarbeiter")
                        .HasForeignKey("FkFhange")
                        .HasConstraintName("c_fkFHangeMitarb")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("emensa.Models.Preise", b =>
                {
                    b.HasOne("emensa.Models.Mahlzeiten", "FkMahlzeitenNavigation")
                        .WithMany("Preise")
                        .HasForeignKey("FkMahlzeiten")
                        .HasConstraintName("c_fkPreiseMahlzeiten")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("emensa.Models.Student", b =>
                {
                    b.HasOne("emensa.Models.FhAngehörige", "FkFhangeNavigation")
                        .WithMany("Student")
                        .HasForeignKey("FkFhange")
                        .HasConstraintName("c_fkFHangeStud")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
